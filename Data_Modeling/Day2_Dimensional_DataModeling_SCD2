CREATE TABLE Jaswanthv.nba_player_scd_v4
(
 player_name VARCHAR,
  is_active BOOLEAN,
  start_season INTEGER,
  end_season INTEGER,
  current_season INTEGER
)
WITH
  (
    FORMAT = 'PARQUET',
    partitioning = ARRAY['current_season']
  )


  -- Logic for one time historical load
  
  With lagged As (
  select 
  player_name,
  CASE WHEN is_active Then 1 else 0 END As is_active,
  CASE WHEN LAG(is_active,1) OVER (PARTITION BY player_name ORDER BY current_season) Then 1 Else 0 END As is_active_last_season,
  current_season
  from Jaswanthv.nba_players_v4
  ),
  streaked As (
  Select *,
  SUM(CASE WHEN is_active <> is_active_last_season Then 1 Else 0 END) OVER (PARTITION BY player_name ORDER BY current_season) As streak_identifier 
  from lagged
  )
  Select player_name, MAX(is_active) as is_active,
  MIN(current_season) As start_season,
  MAX(current_season) As end_season
   from streaked
   group by player_name, streak_identifier
   


   
   INSERT INTO
     Jaswanthv.nba_player_scd_v4
   WITH
     lagged AS (
       SELECT
         player_name,
         CASE
           WHEN is_active THEN 1
           ELSE 0
         END AS is_active,
         CASE
           WHEN LAG(is_active, 1) OVER (
             PARTITION BY
               player_name
             ORDER BY
               current_season
           ) THEN 1
           ELSE 0
         END AS is_active_last_season,
         current_season
       FROM
         Jaswanthv.nba_players_v4
       WHERE
         current_season <= 2001
     ),
     streaked AS (
       SELECT
         *,
         SUM(
           CASE
             WHEN is_active <> is_active_last_season THEN 1
             ELSE 0
           END
         ) OVER (
           PARTITION BY
             player_name
           ORDER BY
             current_season
         ) AS streak_identifier
       FROM
         lagged
     )
   SELECT
     player_name,
     MAX(is_active) = 1 AS is_active,
     MIN(current_season) AS start_season,
     MAX(current_season) AS end_season,
     2001 AS current_season
   FROM
     streaked
   GROUP BY
     player_name,
     streak_identifier
	 
	 
   -- incremental load
   INSERT INTO
     Jaswanthv.nba_player_scd_v4
   WITH
     last_season_scd AS (
       SELECT
         *
       FROM
         Jaswanthv.nba_player_scd_v4
       WHERE
         current_season = 2001
     ),
     current_season_scd AS (
       SELECT
         *
       FROM
         Jaswanthv.nba_players_v4
       WHERE
         current_season = 2002
     ),
     combined AS (
       SELECT
         COALESCE(ls.player_name, cs.player_name) AS player_name,
         COALESCE(ls.start_season, cs.current_season) AS start_season,
         COALESCE(ls.end_season, cs.current_season) AS end_season,
         CASE
           WHEN ls.is_active <> cs.is_active THEN 1
           WHEN ls.is_active = cs.is_active THEN 0
         END AS did_change,
         ls.is_active AS is_active_last_season,
         cs.is_active AS is_active_this_season,
         2002 AS current_season
       FROM
         last_season_scd ls
         FULL OUTER JOIN current_season_scd cs ON ls.player_name = cs.player_name
         AND ls.end_season + 1 = cs.current_season
     ),
     changes AS (
       SELECT
         player_name,
         current_season,
         CASE
           WHEN did_change = 0 THEN ARRAY[
             CAST(
               ROW(
                 is_active_last_season,
                 start_season,
                 end_season + 1
               ) AS ROW(
                 is_active boolean,
                 start_season integer,
                 end_season integer
               )
             )
           ]
           WHEN did_change = 1 THEN ARRAY[
             CAST(
               ROW(is_active_last_season, start_season, end_season) AS ROW(
                 is_active boolean,
                 start_season integer,
                 end_season integer
               )
             ),
             CAST(
               ROW(
                 is_active_this_season,
                 current_season,
                 current_season
               ) AS ROW(
                 is_active boolean,
                 start_season integer,
                 end_season integer
               )
             )
           ]
           WHEN did_change IS NULL THEN ARRAY[
             CAST(
               ROW(
                 COALESCE(is_active_last_season, is_active_this_season),
                 start_season,
                 end_season
               ) AS ROW(
                 is_active boolean,
                 start_season integer,
                 end_season integer
               )
             )
           ]
         END AS change_array
       FROM
         combined
     )
   SELECT
     player_name,
     arr.is_active,
     arr.start_season,
     arr.end_season,
     current_season
   FROM
     changes
     CROSS JOIN UNNEST (change_array) AS arr